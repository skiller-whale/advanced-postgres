/* -----------------------------------------------------------------------------
|
|    1. Bitmap Scans
|
|    The exercise includes two overlapping date ranges. This is intended and you should not change it;
|    this kind of code could easily be generated by building a query in multiple stages with an ORM.
|
|    * Uncomment the ANALYZE command below and save the file. Read the output and
|      think about what indexes might improve the query.
|
|    * Add an index to the `work_items.created_on` column and see how it changes the query plan.
|
|
|    2. Combining Indexes
|
|    * There are two more columns in `work_items` that can be indexed to try and improve
|      the query. Add those indexes one at a time and check the query plan to see whether
|      the total cost and the execution time improve.
|
|    * Given that work_items.project_reference is equal to projects.reference in
|      the join condition of an inner join, you can replace the projects.reference
|      filter with work_items.project_reference. Try adjusting the query and indexes
|      to see if the speed of the query improves by only filtering on columns in the
|      work_items table.
|
*/ -----------------------------------------------------------------------------

CREATE INDEX ON projects (reference);

-- Add indexes here!

-- Uncomment me!
-- ANALYZE;

EXPLAIN ANALYZE
  SELECT *
  FROM work_items items
  INNER JOIN projects ON projects.reference = items.project_reference
  WHERE
  (
    projects.reference = '1128'
    OR
    items.parent_work_item_id BETWEEN 5000 AND 5500
  )
  AND
  (
    created_on BETWEEN '2019-02-21' AND '2019-06-30'
    AND
    created_on BETWEEN '2019-04-01' AND '2019-09-30'
  );
